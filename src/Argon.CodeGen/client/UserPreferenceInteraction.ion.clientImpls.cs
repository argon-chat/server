//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_PreferenceInteraction_ClientImpl(IonClientContext context) : IPreferenceInteraction
{
    
    private static readonly Lazy<MethodInfo> SetPreference_Ref = new(() =>
        typeof(IPreferenceInteraction).GetMethod(nameof(SetPreference), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> GetPreference_Ref = new(() =>
        typeof(IPreferenceInteraction).GetMethod(nameof(GetPreference), BindingFlags.Public | BindingFlags.Instance)!);


    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task SetPreference(string __scope, string __value, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IPreferenceInteraction), SetPreference_Ref.Value);

        var writer = new CborWriter();
        
        const int argsSize = 2;

        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<string>.Write(writer, __scope);
        IonFormatterStorage<string>.Write(writer, __value);
        
        writer.WriteEndArray();

        await req.CallAsync(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetPreference(string __scope, string __value, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IPreferenceInteraction), GetPreference_Ref.Value);

        var writer = new CborWriter();
        
        const int argsSize = 2;

        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<string>.Write(writer, __scope);
        IonFormatterStorage<string>.Write(writer, __value);
        
        writer.WriteEndArray();

        await req.CallAsync(writer.Encode(), ct: ct);
    }

}

