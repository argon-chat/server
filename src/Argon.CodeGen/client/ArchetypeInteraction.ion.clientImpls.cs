//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_ArchetypeInteraction_ClientImpl(IonClientContext context) : IArchetypeInteraction
{
    
    private static readonly Lazy<MethodInfo> GetServerArchetypes_Ref = new(() =>
        typeof(IArchetypeInteraction).GetMethod(nameof(GetServerArchetypes), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> CreateArchetype_Ref = new(() =>
        typeof(IArchetypeInteraction).GetMethod(nameof(CreateArchetype), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> UpdateArchetype_Ref = new(() =>
        typeof(IArchetypeInteraction).GetMethod(nameof(UpdateArchetype), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> SetArchetypeToMember_Ref = new(() =>
        typeof(IArchetypeInteraction).GetMethod(nameof(SetArchetypeToMember), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> GetDetailedServerArchetypes_Ref = new(() =>
        typeof(IArchetypeInteraction).GetMethod(nameof(GetDetailedServerArchetypes), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> UpsertArchetypeEntitlementForChannel_Ref = new(() =>
        typeof(IArchetypeInteraction).GetMethod(nameof(UpsertArchetypeEntitlementForChannel), BindingFlags.Public | BindingFlags.Instance)!);


    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IonArray<Archetype>> GetServerArchetypes(guid __spaceid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IArchetypeInteraction), GetServerArchetypes_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 1;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        
        writer.WriteEndArray();
    
        return await req.CallAsyncWithArray<Archetype>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<Archetype> CreateArchetype(guid __spaceid, string __name, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IArchetypeInteraction), CreateArchetype_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 2;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<string>.Write(writer, __name);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<Archetype>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<Archetype> UpdateArchetype(guid __spaceid, Archetype __data, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IArchetypeInteraction), UpdateArchetype_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 2;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<Archetype>.Write(writer, __data);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<Archetype>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<bool> SetArchetypeToMember(guid __spaceid, guid __memberid, guid __archetypeid, bool __isgrant, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IArchetypeInteraction), SetArchetypeToMember_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 4;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __memberid);
        IonFormatterStorage<guid>.Write(writer, __archetypeid);
        IonFormatterStorage<bool>.Write(writer, __isgrant);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<bool>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IonArray<ArchetypeGroup>> GetDetailedServerArchetypes(guid __spaceid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IArchetypeInteraction), GetDetailedServerArchetypes_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 1;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        
        writer.WriteEndArray();
    
        return await req.CallAsyncWithArray<ArchetypeGroup>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<ChannelEntitlementOverwrite?> UpsertArchetypeEntitlementForChannel(guid __spaceid, guid __channelid, guid __archetypeid, ArgonEntitlement __deny, ArgonEntitlement __allow, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IArchetypeInteraction), UpsertArchetypeEntitlementForChannel_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 5;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        IonFormatterStorage<guid>.Write(writer, __archetypeid);
        IonFormatterStorage<ArgonEntitlement>.Write(writer, __deny);
        IonFormatterStorage<ArgonEntitlement>.Write(writer, __allow);
        
        writer.WriteEndArray();
    
        return await req.CallAsyncNullable<ChannelEntitlementOverwrite>(writer.Encode(), ct: ct);
    }

}

