//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_InventoryInteraction_ClientImpl(IonClientContext context) : IInventoryInteraction
{
    
    private static readonly Lazy<MethodInfo> GetMyInventoryItems_Ref = new(() =>
        typeof(IInventoryInteraction).GetMethod(nameof(GetMyInventoryItems), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> MarkSeen_Ref = new(() =>
        typeof(IInventoryInteraction).GetMethod(nameof(MarkSeen), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> GetNotifications_Ref = new(() =>
        typeof(IInventoryInteraction).GetMethod(nameof(GetNotifications), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> RedeemCode_Ref = new(() =>
        typeof(IInventoryInteraction).GetMethod(nameof(RedeemCode), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> UseItem_Ref = new(() =>
        typeof(IInventoryInteraction).GetMethod(nameof(UseItem), BindingFlags.Public | BindingFlags.Instance)!);


    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IonArray<InventoryItem>> GetMyInventoryItems(CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IInventoryInteraction), GetMyInventoryItems_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 0;
    
        writer.WriteStartArray(argsSize);
        
        
        
        writer.WriteEndArray();
    
        return await req.CallAsyncWithArray<InventoryItem>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task MarkSeen(IonArray<guid> __itemids, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IInventoryInteraction), MarkSeen_Ref.Value);

        var writer = new CborWriter();
        
        const int argsSize = 1;

        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.WriteArray(writer, __itemids);
        
        writer.WriteEndArray();

        await req.CallAsync(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IonArray<InventoryNotification>> GetNotifications(CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IInventoryInteraction), GetNotifications_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 0;
    
        writer.WriteStartArray(argsSize);
        
        
        
        writer.WriteEndArray();
    
        return await req.CallAsyncWithArray<InventoryNotification>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IRedeemResult> RedeemCode(string __code, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IInventoryInteraction), RedeemCode_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 1;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<string>.Write(writer, __code);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<IRedeemResult>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<bool> UseItem(guid __itemid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IInventoryInteraction), UseItem_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 1;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __itemid);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<bool>(writer.Encode(), ct: ct);
    }

}

