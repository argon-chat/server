//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_ChannelInteraction_ClientImpl(IonClientContext context) : IChannelInteraction
{
    
    private static readonly Lazy<MethodInfo> CreateChannel_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(CreateChannel), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> DeleteChannel_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(DeleteChannel), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> GetChannels_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(GetChannels), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> QueryMessages_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(QueryMessages), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> SendMessage_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(SendMessage), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> GetMessages_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(GetMessages), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> DisconnectFromVoiceChannel_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(DisconnectFromVoiceChannel), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> Interlink_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(Interlink), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> KickMemberFromChannel_Ref = new(() =>
        typeof(IChannelInteraction).GetMethod(nameof(KickMemberFromChannel), BindingFlags.Public | BindingFlags.Instance)!);


    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CreateChannel(guid __spaceid, guid __channelid, CreateChannelRequest __request, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), CreateChannel_Ref.Value);

        var writer = new CborWriter();
        
        const int argsSize = 3;

        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        IonFormatterStorage<CreateChannelRequest>.Write(writer, __request);
        
        writer.WriteEndArray();

        await req.CallAsync(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task DeleteChannel(guid __spaceid, guid __channelid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), DeleteChannel_Ref.Value);

        var writer = new CborWriter();
        
        const int argsSize = 2;

        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        
        writer.WriteEndArray();

        await req.CallAsync(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IonArray<RealtimeChannel>> GetChannels(guid __spaceid, guid __channelid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), GetChannels_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 2;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        
        writer.WriteEndArray();
    
        return await req.CallAsyncWithArray<RealtimeChannel>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IonArray<ArgonMessage>> QueryMessages(guid __spaceid, guid __channelid, u8? __from, i4 __limit, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), QueryMessages_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 4;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        IonFormatterStorage<u8>.WriteNullable(writer, __from);
        IonFormatterStorage<i4>.Write(writer, __limit);
        
        writer.WriteEndArray();
    
        return await req.CallAsyncWithArray<ArgonMessage>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<u8> SendMessage(guid __spaceid, guid __channelid, string __text, IonArray<IMessageEntity> __entities, u8? __replyto, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), SendMessage_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 5;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        IonFormatterStorage<string>.Write(writer, __text);
        IonFormatterStorage<IMessageEntity>.WriteArray(writer, __entities);
        IonFormatterStorage<u8>.WriteNullable(writer, __replyto);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<u8>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IonArray<ArgonMessage>> GetMessages(guid __spaceid, guid __channelid, i4 __count, u8 __offset, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), GetMessages_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 4;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        IonFormatterStorage<i4>.Write(writer, __count);
        IonFormatterStorage<u8>.Write(writer, __offset);
        
        writer.WriteEndArray();
    
        return await req.CallAsyncWithArray<ArgonMessage>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task DisconnectFromVoiceChannel(guid __spaceid, guid __channelid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), DisconnectFromVoiceChannel_Ref.Value);

        var writer = new CborWriter();
        
        const int argsSize = 2;

        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        
        writer.WriteEndArray();

        await req.CallAsync(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<IInterlinkResult> Interlink(guid __spaceid, guid __channelid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), Interlink_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 2;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<IInterlinkResult>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task<bool> KickMemberFromChannel(guid __spaceid, guid __channelid, guid __memberid, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IChannelInteraction), KickMemberFromChannel_Ref.Value);
    
        var writer = new CborWriter();
        
        const int argsSize = 3;
    
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        IonFormatterStorage<guid>.Write(writer, __channelid);
        IonFormatterStorage<guid>.Write(writer, __memberid);
        
        writer.WriteEndArray();
    
        return await req.CallAsync<bool>(writer.Encode(), ct: ct);
    }

}

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_EventBus_ClientImpl(IonClientContext context) : IEventBus
{
    
    private static readonly Lazy<MethodInfo> ForServer_Ref = new(() =>
        typeof(IEventBus).GetMethod(nameof(ForServer), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> Dispatch_Ref = new(() =>
        typeof(IEventBus).GetMethod(nameof(Dispatch), BindingFlags.Public | BindingFlags.Instance)!);
    private static readonly Lazy<MethodInfo> Pipe_Ref = new(() =>
        typeof(IEventBus).GetMethod(nameof(Pipe), BindingFlags.Public | BindingFlags.Instance)!);


    
    public IAsyncEnumerable<IArgonEvent> ForServer(guid __spaceid, CancellationToken ct = default)
    {
        var ws = new IonWsClient(context, typeof(IEventBus), ForServer_Ref.Value);
    
        var writer = new CborWriter();

        const int argsSize = 1;
        
        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<guid>.Write(writer, __spaceid);
        
        writer.WriteEndArray();
    
        return ws.CallServerStreamingAsync<IArgonEvent>(writer.Encode(), ct: ct);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Dispatch(IArgonClientEvent __ev, CancellationToken ct = default)
    {
        var req = new IonRequest(context, typeof(IEventBus), Dispatch_Ref.Value);

        var writer = new CborWriter();
        
        const int argsSize = 1;

        writer.WriteStartArray(argsSize);
        
        IonFormatterStorage<IArgonClientEvent>.Write(writer, __ev);
        
        writer.WriteEndArray();

        await req.CallAsync(writer.Encode(), ct: ct);
    }
    public IAsyncEnumerable<IArgonEvent> Pipe(IAsyncEnumerable<IArgonClientEvent> inputStream, CancellationToken ct = default)
    {
        var ws = new IonWsClient(context, typeof(IEventBus), Pipe_Ref.Value);
    
        var writer = new CborWriter();

        const int argsSize = 0;
        
        writer.WriteStartArray(argsSize);
        
        
        
        writer.WriteEndArray();
    
        return ws.CallServerStreamingAsync<IArgonEvent, IArgonClientEvent>(writer.Encode(), inputStream, ct: ct);
    }

}

