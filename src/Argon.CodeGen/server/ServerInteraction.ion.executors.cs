//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_ServerInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMembers_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMembers(__spaceid);
        
        IonFormatterStorage<RealtimeServerMember>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMember_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __userid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMember(__spaceid, __userid);
        
        IonFormatterStorage<RealtimeServerMember>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetInviteCodes_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetInviteCodes(__spaceid);
        
        IonFormatterStorage<InviteCodeEntity>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CreateInviteCode_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.CreateInviteCode(__spaceid);
        
        IonFormatterStorage<InviteCode>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task PrefetchUser_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __userid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.PrefetchUser(__spaceid, __userid);
        
        IonFormatterStorage<ArgonUser>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task PrefetchProfile_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __userid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.PrefetchProfile(__spaceid, __userid);
        
        IonFormatterStorage<ArgonUserProfile>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetChannels_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetChannels(__spaceid);
        
        IonFormatterStorage<RealtimeChannel>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetServerArchetypes_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetServerArchetypes(__spaceid);
        
        IonFormatterStorage<Archetype>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetDetailedServerArchetypes_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetDetailedServerArchetypes(__spaceid);
        
        IonFormatterStorage<ArchetypeGroup>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task BeginUploadSpaceProfileHeader_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.BeginUploadSpaceProfileHeader(__spaceid);
        
        IonFormatterStorage<guid>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CompleteUploadSpaceProfileHeader_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __blobid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.CompleteUploadSpaceProfileHeader(__spaceid, __blobid);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task BeginUploadSpaceAvatar_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.BeginUploadSpaceAvatar(__spaceid);
        
        IonFormatterStorage<guid>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CompleteUploadSpaceAvatar_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IServerInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __blobid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.CompleteUploadSpaceAvatar(__spaceid, __blobid);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        
        if (methodName.Equals("GetMembers", StringComparison.InvariantCultureIgnoreCase))
            return GetMembers_Execute(reader, writer, ct);
        if (methodName.Equals("GetMember", StringComparison.InvariantCultureIgnoreCase))
            return GetMember_Execute(reader, writer, ct);
        if (methodName.Equals("GetInviteCodes", StringComparison.InvariantCultureIgnoreCase))
            return GetInviteCodes_Execute(reader, writer, ct);
        if (methodName.Equals("CreateInviteCode", StringComparison.InvariantCultureIgnoreCase))
            return CreateInviteCode_Execute(reader, writer, ct);
        if (methodName.Equals("PrefetchUser", StringComparison.InvariantCultureIgnoreCase))
            return PrefetchUser_Execute(reader, writer, ct);
        if (methodName.Equals("PrefetchProfile", StringComparison.InvariantCultureIgnoreCase))
            return PrefetchProfile_Execute(reader, writer, ct);
        if (methodName.Equals("GetChannels", StringComparison.InvariantCultureIgnoreCase))
            return GetChannels_Execute(reader, writer, ct);
        if (methodName.Equals("GetServerArchetypes", StringComparison.InvariantCultureIgnoreCase))
            return GetServerArchetypes_Execute(reader, writer, ct);
        if (methodName.Equals("GetDetailedServerArchetypes", StringComparison.InvariantCultureIgnoreCase))
            return GetDetailedServerArchetypes_Execute(reader, writer, ct);
        if (methodName.Equals("BeginUploadSpaceProfileHeader", StringComparison.InvariantCultureIgnoreCase))
            return BeginUploadSpaceProfileHeader_Execute(reader, writer, ct);
        if (methodName.Equals("CompleteUploadSpaceProfileHeader", StringComparison.InvariantCultureIgnoreCase))
            return CompleteUploadSpaceProfileHeader_Execute(reader, writer, ct);
        if (methodName.Equals("BeginUploadSpaceAvatar", StringComparison.InvariantCultureIgnoreCase))
            return BeginUploadSpaceAvatar_Execute(reader, writer, ct);
        if (methodName.Equals("CompleteUploadSpaceAvatar", StringComparison.InvariantCultureIgnoreCase))
            return CompleteUploadSpaceAvatar_Execute(reader, writer, ct);

        
        throw new InvalidOperationException("no method defined");
    }
    
    private static readonly string[] __allowedStreamingMethods = [
        
    ];
    
    public bool IsAllowInputStream(string methodName) => __allowedStreamingMethods.Contains(methodName);
}

