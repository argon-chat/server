//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_InventoryInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMyInventoryItems_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IInventoryInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMyInventoryItems();
        
        IonFormatterStorage<InventoryItem>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task MarkSeen_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IInventoryInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __itemids = IonFormatterStorage<guid>.ReadArray(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.MarkSeen(__itemids);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetNotifications_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IInventoryInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetNotifications();
        
        IonFormatterStorage<InventoryNotification>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task RedeemCode_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IInventoryInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __code = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.RedeemCode(__code);
        
        IonFormatterStorage<IRedeemResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task UseItem_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IInventoryInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __itemid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.UseItem(__itemid);
        
        IonFormatterStorage<bool>.Write(writer, result);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        
        if (methodName.Equals("GetMyInventoryItems", StringComparison.InvariantCultureIgnoreCase))
            return GetMyInventoryItems_Execute(reader, writer, ct);
        if (methodName.Equals("MarkSeen", StringComparison.InvariantCultureIgnoreCase))
            return MarkSeen_Execute(reader, writer, ct);
        if (methodName.Equals("GetNotifications", StringComparison.InvariantCultureIgnoreCase))
            return GetNotifications_Execute(reader, writer, ct);
        if (methodName.Equals("RedeemCode", StringComparison.InvariantCultureIgnoreCase))
            return RedeemCode_Execute(reader, writer, ct);
        if (methodName.Equals("UseItem", StringComparison.InvariantCultureIgnoreCase))
            return UseItem_Execute(reader, writer, ct);

        
        throw new InvalidOperationException("no method defined");
    }
    
    private static readonly string[] __allowedStreamingMethods = [
        
    ];
    
    public bool IsAllowInputStream(string methodName) => __allowedStreamingMethods.Contains(methodName);
}

