//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_PreferenceInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task SetPreference_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IPreferenceInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __scope = IonFormatterStorage<string>.Read(reader);
        var __value = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.SetPreference(__scope, __value);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetPreference_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IPreferenceInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __scope = IonFormatterStorage<string>.Read(reader);
        var __value = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.GetPreference(__scope, __value);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        
        if (methodName.Equals("SetPreference", StringComparison.InvariantCultureIgnoreCase))
            return SetPreference_Execute(reader, writer, ct);
        if (methodName.Equals("GetPreference", StringComparison.InvariantCultureIgnoreCase))
            return GetPreference_Execute(reader, writer, ct);

        
        throw new InvalidOperationException("no method defined");
    }
    
    private static readonly string[] __allowedStreamingMethods = [
        
    ];
    
    public bool IsAllowInputStream(string methodName) => __allowedStreamingMethods.Contains(methodName);
}

