//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_UserInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMe_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMe();
        
        IonFormatterStorage<ArgonUser>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CreateSpace_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __request = IonFormatterStorage<CreateServerRequest>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.CreateSpace(__request);
        
        IonFormatterStorage<ICreateSpaceResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetSpaces_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetSpaces();
        
        IonFormatterStorage<ArgonSpaceBase>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task UpdateMe_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __request = IonFormatterStorage<UserEditInput>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.UpdateMe(__request);
        
        IonFormatterStorage<ArgonUser>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task JoinToSpace_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __invitecode = IonFormatterStorage<InviteCode>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.JoinToSpace(__invitecode);
        
        IonFormatterStorage<IJoinToSpaceResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task BroadcastPresence_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __presence = IonFormatterStorage<UserActivityPresence>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.BroadcastPresence(__presence);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task RemoveBroadcastPresence_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.RemoveBroadcastPresence();
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMyFeatures_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMyFeatures();
        
        IonFormatterStorage<FeatureFlag>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMyProfile_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMyProfile();
        
        IonFormatterStorage<ArgonUserProfile>.Write(writer, result);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        
        if (methodName.Equals("GetMe", StringComparison.InvariantCultureIgnoreCase))
            return GetMe_Execute(reader, writer, ct);
        if (methodName.Equals("CreateSpace", StringComparison.InvariantCultureIgnoreCase))
            return CreateSpace_Execute(reader, writer, ct);
        if (methodName.Equals("GetSpaces", StringComparison.InvariantCultureIgnoreCase))
            return GetSpaces_Execute(reader, writer, ct);
        if (methodName.Equals("UpdateMe", StringComparison.InvariantCultureIgnoreCase))
            return UpdateMe_Execute(reader, writer, ct);
        if (methodName.Equals("JoinToSpace", StringComparison.InvariantCultureIgnoreCase))
            return JoinToSpace_Execute(reader, writer, ct);
        if (methodName.Equals("BroadcastPresence", StringComparison.InvariantCultureIgnoreCase))
            return BroadcastPresence_Execute(reader, writer, ct);
        if (methodName.Equals("RemoveBroadcastPresence", StringComparison.InvariantCultureIgnoreCase))
            return RemoveBroadcastPresence_Execute(reader, writer, ct);
        if (methodName.Equals("GetMyFeatures", StringComparison.InvariantCultureIgnoreCase))
            return GetMyFeatures_Execute(reader, writer, ct);
        if (methodName.Equals("GetMyProfile", StringComparison.InvariantCultureIgnoreCase))
            return GetMyProfile_Execute(reader, writer, ct);

        
        throw new InvalidOperationException("no method defined");
    }
    
    private static readonly string[] __allowedStreamingMethods = [
        
    ];
    
    public bool IsAllowInputStream(string methodName) => __allowedStreamingMethods.Contains(methodName);
}

