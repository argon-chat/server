//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_ChannelInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CreateChannel_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 3;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
        var __request = IonFormatterStorage<CreateChannelRequest>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.CreateChannel(__spaceid, __channelid, __request);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task DeleteChannel_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.DeleteChannel(__spaceid, __channelid);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetChannels_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetChannels(__spaceid, __channelid);
        
        IonFormatterStorage<RealtimeChannel>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task QueryMessages_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 4;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
        var __from = reader.ReadNullable<u8>();
        var __limit = IonFormatterStorage<i4>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.QueryMessages(__spaceid, __channelid, __from, __limit);
        
        IonFormatterStorage<ArgonMessage>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task SendMessage_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 5;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
        var __text = IonFormatterStorage<string>.Read(reader);
        var __entities = IonFormatterStorage<IMessageEntity>.ReadArray(reader);
        var __replyto = reader.ReadNullable<u8>();
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.SendMessage(__spaceid, __channelid, __text, __entities, __replyto);
        
        IonFormatterStorage<u8>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMessages_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 4;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
        var __count = IonFormatterStorage<i4>.Read(reader);
        var __offset = IonFormatterStorage<u8>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMessages(__spaceid, __channelid, __count, __offset);
        
        IonFormatterStorage<ArgonMessage>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task DisconnectFromVoiceChannel_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.DisconnectFromVoiceChannel(__spaceid, __channelid);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Interlink_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Interlink(__spaceid, __channelid);
        
        IonFormatterStorage<IInterlinkResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task KickMemberFromChannel_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IChannelInteraction>();
    
        const int argumentSize = 3;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
        var __memberid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.KickMemberFromChannel(__spaceid, __channelid, __memberid);
        
        IonFormatterStorage<bool>.Write(writer, result);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer)
    {
        
        if (methodName.Equals("CreateChannel", StringComparison.InvariantCultureIgnoreCase))
            return CreateChannel_Execute(reader, writer);
        if (methodName.Equals("DeleteChannel", StringComparison.InvariantCultureIgnoreCase))
            return DeleteChannel_Execute(reader, writer);
        if (methodName.Equals("GetChannels", StringComparison.InvariantCultureIgnoreCase))
            return GetChannels_Execute(reader, writer);
        if (methodName.Equals("QueryMessages", StringComparison.InvariantCultureIgnoreCase))
            return QueryMessages_Execute(reader, writer);
        if (methodName.Equals("SendMessage", StringComparison.InvariantCultureIgnoreCase))
            return SendMessage_Execute(reader, writer);
        if (methodName.Equals("GetMessages", StringComparison.InvariantCultureIgnoreCase))
            return GetMessages_Execute(reader, writer);
        if (methodName.Equals("DisconnectFromVoiceChannel", StringComparison.InvariantCultureIgnoreCase))
            return DisconnectFromVoiceChannel_Execute(reader, writer);
        if (methodName.Equals("Interlink", StringComparison.InvariantCultureIgnoreCase))
            return Interlink_Execute(reader, writer);
        if (methodName.Equals("KickMemberFromChannel", StringComparison.InvariantCultureIgnoreCase))
            return KickMemberFromChannel_Execute(reader, writer);

        
        throw new InvalidOperationException("no method defined");
    }
}

public sealed class Ion_EventBus_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter, IServiceStreamExecutorRouter
{
    
    public async IAsyncEnumerable<Memory<byte>> ForServer_Execute(CborReader reader)
    {
        var service = scope.ServiceProvider.GetRequiredService<IEventBus>();

        const int argumentSize = 1;

        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
            
        var __spaceid = IonFormatterStorage<guid>.Read(reader);

        reader.ReadEndArrayAndSkip(arraySize - argumentSize);

        await foreach (var e in service.ForServer(__spaceid))
        {
            var writer = new CborWriter();

            IonFormatterStorage<IArgonEvent>.Write(writer, e);

            var mem = MemoryPool<byte>.Shared.Rent(writer.BytesWritten);

            writer.Encode(mem.Memory.Span);

            yield return mem.Memory;

            mem.Dispose();
        }
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Dispatch_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IEventBus>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __ev = IonFormatterStorage<IArgonClientEvent>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.Dispatch(__ev);
    }

    
        public IAsyncEnumerable<Memory<byte>> StreamRouteExecuteAsync(string methodName, CborReader reader, [EnumeratorCancellation] CancellationToken ct)
    {
        
        if (methodName.Equals("ForServer", StringComparison.InvariantCultureIgnoreCase))
            return ForServer_Execute(reader);

        
        throw new InvalidOperationException("no method defined");
    }
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer)
    {
        
        if (methodName.Equals("Dispatch", StringComparison.InvariantCultureIgnoreCase))
            return Dispatch_Execute(reader, writer);

        
        throw new InvalidOperationException("no method defined");
    }
}

