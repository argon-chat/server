//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_MeetingInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Join_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMeetingInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __invitecode = IonFormatterStorage<string>.Read(reader);
        var __username = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.Join(__invitecode, __username);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CreateMeetingLink_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMeetingInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.CreateMeetingLink();
        
        IonFormatterStorage<string>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task SetDefaultPermissions_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMeetingInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __roomid = IonFormatterStorage<string>.Read(reader);
        var __permissions = IonFormatterStorage<i8>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.SetDefaultPermissions(__roomid, __permissions);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task BeginRecordAsync_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMeetingInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __roomid = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.BeginRecordAsync(__roomid);
        
        IonFormatterStorage<string>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task EndRecordAsync_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IMeetingInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __roomid = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.EndRecordAsync(__roomid);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        
        if (methodName.Equals("Join", StringComparison.InvariantCultureIgnoreCase))
            return Join_Execute(reader, writer, ct);
        if (methodName.Equals("CreateMeetingLink", StringComparison.InvariantCultureIgnoreCase))
            return CreateMeetingLink_Execute(reader, writer, ct);
        if (methodName.Equals("SetDefaultPermissions", StringComparison.InvariantCultureIgnoreCase))
            return SetDefaultPermissions_Execute(reader, writer, ct);
        if (methodName.Equals("BeginRecordAsync", StringComparison.InvariantCultureIgnoreCase))
            return BeginRecordAsync_Execute(reader, writer, ct);
        if (methodName.Equals("EndRecordAsync", StringComparison.InvariantCultureIgnoreCase))
            return EndRecordAsync_Execute(reader, writer, ct);

        
        throw new InvalidOperationException("no method defined");
    }
    
    private static readonly string[] __allowedStreamingMethods = [
        
    ];
    
    public bool IsAllowInputStream(string methodName) => __allowedStreamingMethods.Contains(methodName);
}

