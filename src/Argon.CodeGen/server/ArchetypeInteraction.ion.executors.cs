//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_ArchetypeInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetServerArchetypes_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IArchetypeInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetServerArchetypes(__spaceid);
        
        IonFormatterStorage<Archetype>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CreateArchetype_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IArchetypeInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __name = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.CreateArchetype(__spaceid, __name);
        
        IonFormatterStorage<Archetype>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task UpdateArchetype_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IArchetypeInteraction>();
    
        const int argumentSize = 2;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __data = IonFormatterStorage<Archetype>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.UpdateArchetype(__spaceid, __data);
        
        IonFormatterStorage<Archetype>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task SetArchetypeToMember_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IArchetypeInteraction>();
    
        const int argumentSize = 4;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __memberid = IonFormatterStorage<guid>.Read(reader);
        var __archetypeid = IonFormatterStorage<guid>.Read(reader);
        var __isgrant = IonFormatterStorage<bool>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.SetArchetypeToMember(__spaceid, __memberid, __archetypeid, __isgrant);
        
        IonFormatterStorage<bool>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetDetailedServerArchetypes_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IArchetypeInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetDetailedServerArchetypes(__spaceid);
        
        IonFormatterStorage<ArchetypeGroup>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task UpsertArchetypeEntitlementForChannel_Execute(CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        var service = scope.ServiceProvider.GetRequiredService<IArchetypeInteraction>();
    
        const int argumentSize = 5;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __channelid = IonFormatterStorage<guid>.Read(reader);
        var __archetypeid = IonFormatterStorage<guid>.Read(reader);
        var __deny = IonFormatterStorage<ArgonEntitlement>.Read(reader);
        var __allow = IonFormatterStorage<ArgonEntitlement>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.UpsertArchetypeEntitlementForChannel(__spaceid, __channelid, __archetypeid, __deny, __allow);
        
        IonFormatterStorage<ChannelEntitlementOverwrite>.WriteNullable(writer, result);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer, CancellationToken ct = default)
    {
        
        if (methodName.Equals("GetServerArchetypes", StringComparison.InvariantCultureIgnoreCase))
            return GetServerArchetypes_Execute(reader, writer, ct);
        if (methodName.Equals("CreateArchetype", StringComparison.InvariantCultureIgnoreCase))
            return CreateArchetype_Execute(reader, writer, ct);
        if (methodName.Equals("UpdateArchetype", StringComparison.InvariantCultureIgnoreCase))
            return UpdateArchetype_Execute(reader, writer, ct);
        if (methodName.Equals("SetArchetypeToMember", StringComparison.InvariantCultureIgnoreCase))
            return SetArchetypeToMember_Execute(reader, writer, ct);
        if (methodName.Equals("GetDetailedServerArchetypes", StringComparison.InvariantCultureIgnoreCase))
            return GetDetailedServerArchetypes_Execute(reader, writer, ct);
        if (methodName.Equals("UpsertArchetypeEntitlementForChannel", StringComparison.InvariantCultureIgnoreCase))
            return UpsertArchetypeEntitlementForChannel_Execute(reader, writer, ct);

        
        throw new InvalidOperationException("no method defined");
    }
    
    private static readonly string[] __allowedStreamingMethods = [
        
    ];
    
    public bool IsAllowInputStream(string methodName) => __allowedStreamingMethods.Contains(methodName);
}

