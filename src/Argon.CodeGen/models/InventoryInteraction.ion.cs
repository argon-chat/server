//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed record InventoryItem(string id, guid instanceId, datetime grantedDate, bool usable, bool giftable, ItemUseVector? usableVector, guid? receivedFrom, duration? ttl);


[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed record DetailedInventoryItem(InventoryItem item, InventoryItem? containedItem);


[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed record InventoryNotification(guid inventoryItemId, string id, datetime createdAt);


[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public enum ItemUseVector
{
    RedeemCode = 0,
    Premium = 1,
    Box = 2,
    QualifierBox = 3,
}


[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public enum RedeemError
{
    NOT_FOUND = 0,
    INACTIVE = 1,
    EXPIRED = 2,
    LIMIT_REACHED = 3,
    ALREADY = 4,
}


[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public interface IInventoryInteraction : IIonService
{
    Task<IonArray<InventoryItem>> GetMyInventoryItems(CancellationToken ct = default);
    Task MarkSeen(IonArray<guid> itemIds, CancellationToken ct = default);
    Task<IonArray<InventoryNotification>> GetNotifications(CancellationToken ct = default);
    Task<IRedeemResult> RedeemCode(string code, CancellationToken ct = default);
    Task<bool> UseItem(guid itemId, CancellationToken ct = default);
}



[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public interface IRedeemResult : IIonUnion<IRedeemResult>
{
    string UnionKey { get; }
    uint UnionIndex { get; }
    
    
    internal bool IsSuccessRedeem => this is SuccessRedeem;

    internal bool IsFailedRedeem => this is FailedRedeem;

}


[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed record SuccessRedeem() : IRedeemResult
{
    public string UnionKey => nameof(SuccessRedeem);
    public uint UnionIndex => 0;
}

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed record FailedRedeem(RedeemError error) : IRedeemResult
{
    public string UnionKey => nameof(FailedRedeem);
    public uint UnionIndex => 1;
}



[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_IRedeemResult_Formatter : IonFormatter<IRedeemResult>
{
    public IRedeemResult Read(CborReader reader)
    {
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
        var unionIndex = reader.ReadUInt32();
        IRedeemResult result;
        if (false) {}
        
        else if (unionIndex == 0)
            result = IonFormatterStorage<SuccessRedeem>.Read(reader);

        else if (unionIndex == 1)
            result = IonFormatterStorage<FailedRedeem>.Read(reader);

        else
            throw new InvalidOperationException();
        reader.ReadEndArray();
        return result;
    }

    public void Write(CborWriter writer, IRedeemResult value)
    {
        writer.WriteStartArray(2);
        writer.WriteUInt32(value.UnionIndex);

        if (false) {}
        
        else if (value is SuccessRedeem n_0)
        {
            if (n_0.UnionIndex != 0)
                throw new InvalidOperationException();
            IonFormatterStorage<SuccessRedeem>.Write(writer, n_0);
        }

        else if (value is FailedRedeem n_1)
        {
            if (n_1.UnionIndex != 1)
                throw new InvalidOperationException();
            IonFormatterStorage<FailedRedeem>.Write(writer, n_1);
        }
    
        else
            throw new InvalidOperationException();
        writer.WriteEndArray();    
    }
}


[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_SuccessRedeem_Formatter : IonFormatter<SuccessRedeem>
{
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public SuccessRedeem Read(CborReader reader)
    {
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");;
        
        reader.ReadEndArrayAndSkip(arraySize - 0);
        return new();
    }
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public void Write(CborWriter writer, SuccessRedeem value)
    {
        writer.WriteStartArray(0);
        
        writer.WriteEndArray();
    }
}

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_FailedRedeem_Formatter : IonFormatter<FailedRedeem>
{
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public FailedRedeem Read(CborReader reader)
    {
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");;
        var __error = IonFormatterStorage<RedeemError>.Read(reader);
        reader.ReadEndArrayAndSkip(arraySize - 1);
        return new(__error);
    }
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public void Write(CborWriter writer, FailedRedeem value)
    {
        writer.WriteStartArray(1);
        IonFormatterStorage<RedeemError>.Write(writer, value.error);
        writer.WriteEndArray();
    }
}


