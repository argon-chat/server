// <auto-generated />
using System;
using Argon.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Argon.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251101075823_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Regional:MultiRegion", "{\"Primary\":\"ru-central\",\"Regions\":[\"us-east\",\"eu-central\",\"ru-central\"],\"Survive\":\"REGION FAILURE\"}")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonCouponEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxRedemptions")
                        .HasColumnType("integer");

                    b.Property<int>("RedemptionCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReferenceItemEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ReferenceItemEntityId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonCouponRedemptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("RedeemedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponRedemption");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAffectBadge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGiftable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReference")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReceivedFrom")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RedemptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScenarioKey")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("TTL")
                        .HasColumnType("interval");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UseVector")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsReference");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RedemptionId");

                    b.HasIndex("ScenarioKey");

                    b.HasIndex("TemplateId");

                    b.HasIndex("Id", "IsReference");

                    b.HasIndex("Id", "OwnerId");

                    b.HasIndex("OwnerId", "IsAffectBadge");

                    b.HasIndex("OwnerId", "TemplateId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonItemNotificationEntity", b =>
                {
                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InventoryItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("OwnerUserId", "InventoryItemId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("OwnerUserId", "CreatedAt")
                        .HasDatabaseName("ix_unread_owner_created");

                    b.ToTable("UnreadInventoryItems");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ItemUseScenario", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ScenarioType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("ItemUseScenario");

                    b.HasDiscriminator<string>("ScenarioType").HasValue("ItemUseScenario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Argon.Entities.ArchetypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Colour")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Entitlement")
                        .HasColumnType("BIGINT");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMentionable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Archetypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-3333-0000-1111-111111111111"),
                            Colour = -8355712,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorId = new Guid("11111111-2222-1111-2222-111111111111"),
                            Description = "Default role for everyone in this space",
                            Entitlement = 15761383L,
                            IsDefault = false,
                            IsDeleted = false,
                            IsGroup = false,
                            IsHidden = false,
                            IsLocked = false,
                            IsMentionable = true,
                            Name = "everyone",
                            SpaceId = new Guid("11111111-0000-1111-1111-111111111111"),
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("11111111-4444-0000-1111-111111111111"),
                            Colour = -8355712,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorId = new Guid("11111111-2222-1111-2222-111111111111"),
                            Description = "Default role for owner in this space",
                            Entitlement = -1L,
                            IsDefault = false,
                            IsDeleted = false,
                            IsGroup = false,
                            IsHidden = true,
                            IsLocked = true,
                            IsMentionable = false,
                            Name = "owner",
                            SpaceId = new Guid("11111111-0000-1111-1111-111111111111"),
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Argon.Entities.ArgonMessageEntity", b =>
                {
                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValueSql("unique_rowid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Entities")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("Reply")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SpaceId", "ChannelId", "MessageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId", "ChannelId", "CreatedAt");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("SpaceId", "ChannelId", "CreatedAt"), new[] { "Text", "Entities" });

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntitlementOverwriteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Allow")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Deny")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Scope")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SpaceMemberId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArchetypeId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceMemberId");

                    b.ToTable("ChannelEntitlementOverwrites");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChannelType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("text");

                    b.Property<bool>("DoNotRestrictBoosters")
                        .HasColumnType("boolean");

                    b.Property<string>("FractionalIndex")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SlowMode")
                        .HasColumnType("interval");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Argon.Entities.SpaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarFileId")
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<string>("TopBannedFileId")
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Spaces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-0000-1111-1111-111111111111"),
                            AvatarFileId = "",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorId = new Guid("11111111-2222-1111-2222-111111111111"),
                            Description = "",
                            IsDeleted = false,
                            Name = "system_server",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Argon.Entities.SpaceInvite", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpireAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Invites");

                    b.HasAnnotation("Job:Expiration", "{\"TimestampKey\":\"ExpireAt\",\"CronValue\":{\"value\":\"0 0 * * *\"},\"SelectBatchSize\":5000,\"DeleteBatchSize\":5000,\"RangeConcurrency\":4,\"DeleteRateLimit\":52428800}");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberArchetypeEntity", b =>
                {
                    b.Property<Guid>("SpaceMemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.HasKey("SpaceMemberId", "ArchetypeId");

                    b.HasIndex("ArchetypeId");

                    b.ToTable("MemberArchetypes");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToServerRelations");
                });

            modelBuilder.Entity("Argon.Entities.UserDeviceHistoryEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("MachineId")
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<string>("LastKnownIP")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastLoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegionAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.HasKey("UserId", "MachineId");

                    b.ToTable("DeviceHistories");
                });

            modelBuilder.Entity("Argon.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AgreeTOS")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowedSendOptionalEmails")
                        .HasColumnType("boolean");

                    b.Property<string>("AvatarFileId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockDownExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockDownIsAppealable")
                        .HasColumnType("boolean");

                    b.Property<int>("LockdownReason")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(255)")
                        .HasComputedColumnSql("lower(\"Email\")", true);

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(64)")
                        .HasComputedColumnSql("lower(\"Username\")", true);

                    b.Property<string>("PasswordDigest")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PreferredAuthMode")
                        .HasColumnType("integer");

                    b.Property<int>("PreferredOtpMethod")
                        .HasColumnType("integer");

                    b.Property<string>("TotpSecret")
                        .HasMaxLength(512)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUsername")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-1111-2222-111111111111"),
                            AgreeTOS = false,
                            AllowedSendOptionalEmails = false,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DisplayName = "System",
                            Email = "system@argon.gl",
                            IsDeleted = false,
                            LockDownIsAppealable = false,
                            LockdownReason = 0,
                            PreferredAuthMode = 0,
                            PreferredOtpMethod = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Username = "system"
                        });
                });

            modelBuilder.Entity("Argon.Entities.UserProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Badges")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("BannerFileId")
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasMaxLength(512)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<string>("CustomStatusIconId")
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Argon.Entities.UsernameReservedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.BoxScenario", b =>
                {
                    b.HasBaseType("Argon.Api.Entities.Data.ItemUseScenario");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Box");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.PremiumScenario", b =>
                {
                    b.HasBaseType("Argon.Api.Entities.Data.ItemUseScenario");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Premium");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.QualifierBox", b =>
                {
                    b.HasBaseType("Argon.Api.Entities.Data.ItemUseScenario");

                    b.Property<Guid>("ReferenceItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("ReferenceItemId");

                    b.HasDiscriminator().HasValue("QualifierBox");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.RedeemScenario", b =>
                {
                    b.HasBaseType("Argon.Api.Entities.Data.ItemUseScenario");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("RedeemCode");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonCouponEntity", b =>
                {
                    b.HasOne("Argon.Api.Entities.Data.ArgonItemEntity", "ReferenceItemEntity")
                        .WithMany()
                        .HasForeignKey("ReferenceItemEntityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReferenceItemEntity");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonCouponRedemptionEntity", b =>
                {
                    b.HasOne("Argon.Api.Entities.Data.ArgonCouponEntity", "Coupon")
                        .WithMany("Redemptions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonItemEntity", b =>
                {
                    b.HasOne("Argon.Api.Entities.Data.ArgonCouponRedemptionEntity", null)
                        .WithMany("Items")
                        .HasForeignKey("RedemptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Argon.Api.Entities.Data.ItemUseScenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioKey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonItemNotificationEntity", b =>
                {
                    b.HasOne("Argon.Api.Entities.Data.ArgonItemEntity", null)
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Argon.Entities.ArchetypeEntity", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("Archetypes")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntitlementOverwriteEntity", b =>
                {
                    b.HasOne("Argon.Entities.ArchetypeEntity", "Archetype")
                        .WithMany()
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Argon.Entities.ChannelEntity", "Channel")
                        .WithMany("EntitlementOverwrites")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Argon.Entities.SpaceMemberEntity", "SpaceMember")
                        .WithMany()
                        .HasForeignKey("SpaceMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Archetype");

                    b.Navigation("Channel");

                    b.Navigation("SpaceMember");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntity", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("Channels")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Argon.Entities.SpaceInvite", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("ServerInvites")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberArchetypeEntity", b =>
                {
                    b.HasOne("Argon.Entities.ArchetypeEntity", "Archetype")
                        .WithMany("SpaceMemberRoles")
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Argon.Entities.SpaceMemberEntity", "ServerMember")
                        .WithMany("SpaceMemberArchetypes")
                        .HasForeignKey("SpaceMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archetype");

                    b.Navigation("ServerMember");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberEntity", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("Users")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Argon.Entities.UserEntity", "User")
                        .WithMany("ServerMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Argon.Entities.UserDeviceHistoryEntity", b =>
                {
                    b.HasOne("Argon.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Argon.Entities.UserProfileEntity", b =>
                {
                    b.HasOne("Argon.Entities.UserEntity", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Argon.Entities.UserProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.QualifierBox", b =>
                {
                    b.HasOne("Argon.Api.Entities.Data.ArgonItemEntity", "ReferenceItem")
                        .WithMany()
                        .HasForeignKey("ReferenceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferenceItem");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonCouponEntity", b =>
                {
                    b.Navigation("Redemptions");
                });

            modelBuilder.Entity("Argon.Api.Entities.Data.ArgonCouponRedemptionEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Argon.Entities.ArchetypeEntity", b =>
                {
                    b.Navigation("SpaceMemberRoles");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntity", b =>
                {
                    b.Navigation("EntitlementOverwrites");
                });

            modelBuilder.Entity("Argon.Entities.SpaceEntity", b =>
                {
                    b.Navigation("Archetypes");

                    b.Navigation("Channels");

                    b.Navigation("ServerInvites");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberEntity", b =>
                {
                    b.Navigation("SpaceMemberArchetypes");
                });

            modelBuilder.Entity("Argon.Entities.UserEntity", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ServerMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
